Machine Learning Basics
————————————-

Liner Regression :

Cost function : 

Without regularisation:

J=1/(2*m) * (sum((X * theta - y) .^ 2));

Without regularisation:

diff = X*theta - y;
 
theta1 = [0 ; theta(2:end, :)];
reg = lambda*(theta1'*theta1) / (2*m);
 
J = (diff'*diff)/(2*m) + reg;
grad = (X'*diff+lambda*theta1)/m;


Gradient Descent :

m = length(y)

diff = X*theta - y;
theta1 = [0 ; theta(2:end, :)];
grad = (X'*diff+lambda*theta1)/m;



Additional Method for Ex1 :

J_history = zeros(num_iters, 1);
temp=[];
for iter = 1:num_iters

temp=theta;
theta(1,1)=temp(1,1) - ( alpha/m * sum((X*temp)-y) );
theta(2,1)=temp(2,1) - ( alpha/m * sum(((X*temp)-y) .* X(:,2)) );


Normalisation :

function [X_norm, mu, sigma] = featureNormalize(X)
%FEATURENORMALIZE Normalizes the features in X 
%   FEATURENORMALIZE(X) returns a normalized version of X where
%   the mean value of each feature is 0 and the standard deviation
%   is 1. This is often a good preprocessing step to do when
%   working with learning algorithms.
 
mu = mean(X);
X_norm = bsxfun(@minus, X, mu);
 
sigma = std(X_norm);
X_norm = bsxfun(@rdivide, X_norm, sigma);
  
end



2.Logistic Regression

Sigmoid Function :

g = zeros(size(z));
g=1 ./ (1+exp(-z));

Sigmoid Gradient :   g = sigmoid(z) .* (1 - sigmoid(z)); 


Cost function : 

Without regularisation :
m = length(y); % number of training examples
J = 0;
grad = zeros(size(theta));
X_sig=sigmoid(X*theta);
J = -(    sum((log(X_sig) .* y )) +       sum((log(1-X_sig).* (1-y)))    ) ./ m;

With regularisation :

m = length(y); % number of training examples
n = length(X);
J = 0;
grad = zeros(size(theta));
k=size(X);
n=k(:,2);
reg=0;

for i=2:n
                                reg=reg + theta(i,1)*theta(i,1);
end for 

reg=reg .* (lambda/(2*m) );

X_sig_reg=sigmoid(X*theta);

J = -(    sum((log(X_sig_reg) .* y )) +       sum((log(1-X_sig_reg).* (1-y)))    ) ./ m + reg;


Gradient Descent :

grad=sum( (X_sig_reg-y) .* X ) ./ m ;


j=0;
for j=2:n
grad(1,j)=grad(1,j) + ( (lambda/m)*theta(j,1) );
endfor


Logistic regression One Vs All classifier

Cost function :

hx=sigmoid(X*theta);

%nullyfying the ffect of theta(1,1)
theta_reg = [0;theta(2:end, :);];
J = (1/m)*(-y'* log(hx) - (1 - y)'*log(1-hx))+(lambda/(2*m))*theta_reg'*theta_reg;

Gradient :

grad = (1/m)*(X'*(hx-y)+lambda*theta_reg);


Predict One vs All
m = size(X, 1);
num_labels = size(all_theta, 1);

% You need to return the following variables correctly 
p = zeros(size(X, 1), 1);

% Add ones to the X data matrix
X = [ones(m, 1) X];

ps = sigmoid(X*all_theta');
size(ps)
[p_max, i_max]=max(ps, [], 2);
p = i_max;
size(p)



Neural Network :

Random initialisation of weights : 

W = zeros(L_out, 1 + L_in);
epsilon_init = 0.12;
W = rand(L_out, 1 + L_in) * (2 * epsilon_init) - epsilon_init;


Cost function :

Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));


a1 = [ones(m, 1) X];
z2 = a1*Theta1';
a2 = [ones(size(z2, 1), 1) sigmoid(z2)];
z3 = a2*Theta2';
a3 = sigmoid(z3);
h =  a3;

I=eye(num_labels);
Y=zeros(m,num_labels);
for i=1:m
    Y(i,:)=I(y(i),:);
end
p=sum(sum(Theta1(:,2:end).^2),2) + sum(sum(Theta2(:,2:end).^2),2);

J = sum(sum((-Y).*log(h) - (1-Y).*log(1-h), 2))/m + lambda*p/(2*m);

Gradient :

sigma3 = a3-Y;
sigma2 = (sigma3*Theta2).*sigmoidGradient([ones(size(z2, 1), 1) z2]);
sigma2 = sigma2(:, 2:end);
% accumulate gradients
delta_1 = (sigma2'*a1);
delta_2 = (sigma3'*a2);
% calculate regularized gradient
p1 = (lambda/m)*[zeros(size(Theta1, 1), 1) Theta1(:, 2:end)];
p2 = (lambda/m)*[zeros(size(Theta2, 1), 1) Theta2(:, 2:end)];
Theta1_grad = delta_1./m + p1;
Theta2_grad = delta_2./m + p2;
grad = [Theta1_grad(:) ; Theta2_grad(:)];